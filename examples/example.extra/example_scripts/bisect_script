#! /bin/bash

TREE=master
NUM_COMMITS=0
ARGUMENTS="bzImage"
BUILD_DIR="compiled/"
COMPILER="ccache gcc"
ARCH="x86_64"
THREADS="8"
# i.e. building a full kernel, using ccache for the x86 compiler
# We don't care about ccache for other systems b/c not building frequently
# enough

#parse more complicated make command, default is above
#Arguements:
#1 - files to make, bzImage to cmdline if unsure
#2 - compiler, gcc if unsure (without ARCH might be weird)
#3 - ARCH, x86_64 if unsure
if [ $# -gt 0 ];
then
	ARGUMENTS=$1
fi
if [ $# -gt 1 ];
then
	COMPILER=$2
fi
if [ $# -gt 2 ];
then
	ARCH=$3
fi

COMMAND="make -s -j$THREADS O=$BUILD_DIR $ARGUMENTS CC='$COMPILER' ARCH=$ARCH"
printf "Files: $ARGUMENTS\n$COMMAND\n"
#This compiles ALL commits from TREE~NUM_COMMITS, printing out ONLY errors
#To access a specific commit for debugging, simply checkout TREE~NUM

#This WILL NOT work with if there are changes to your present working directory.
#Either commit/discard them, or look at the simpler build script.

echo "building for commit: 0"
git checkout $TREE -q
git log --oneline -1
eval $COMMAND

for ((i = 1; i <= $NUM_COMMITS; i++))
do
	echo "building for commit $i"
	git checkout HEAD~1 -q
	git log --oneline -1
	eval $COMMAND
done
git checkout $TREE -q
