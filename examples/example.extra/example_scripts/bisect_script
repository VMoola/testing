#! /bin/bash

SHA=master
NUM_COMMITS=0
FILES="bzImage"
BUILD_DIR="$HOME/kernel/compiled/"
COMPILER="ccache gcc"
ARCH="x86_64"
THREADS="8"
# i.e. building a full kernel, using ccache for the x86 compiler
# We don't care about ccache for other systems b/c not building frequently
# enough

#parse more complicated make command. Expected input is "-{opt}"
#default is above Arguements. Below is all options available:

#a - ARCH, x86_64 if unsure
#c - compiler, gcc if unsure (without ARCH might be weird)
#f - files to make, bzImage to cmdline if unsure
#n - number of commits to build backwards
#o - output directory, appended onto "$HOME/kernel"
#s - SHA/Branch to pull from git repo - pulled commit is the first one built
#t - number of threads

OPTSTRING="a:c:f:n:o:s:t:h"

while getopts ${OPTSTRING} opt; do
	case ${opt} in
		a)
			ARCH=${OPTARG}
			;;
		c)
			COMPILER=${OPTARG}
			;;
		f)
			FILES=${OPTARG}
			;;
		n)
			NUM_COMMITS=${OPTARG}
			;;
		o)
			BUILD_DIR="$HOME/kernel/${OPTARG}/"
			;;
		s)
			SHA=${OPTARG}
			;;
		t)
			THREADS=${OPTARG}
			;;
		h)
			printf "a : ARCH\nc : COMPILER\nf : FILES\nn : NUM_COMMITS\no : BUILD_DIR\ns : SHA or Branch\nt : NUM_THREADS\n"
			echo "See file for more details"
			exit
			;;
	esac
done

COMMAND="make -s -j$THREADS O=$BUILD_DIR $FILES CC='$COMPILER' ARCH=$ARCH"
printf "Files: $FILES\n$COMMAND\n"
#This compiles ALL commits from SHA~NUM_COMMITS, printing out ONLY errors
#To access a specific commit for debugging, simply checkout SHA~NUM

#This WILL NOT work with if there are changes to your present working directory.
#Either commit/discard them, or look at the simpler build script.

echo "building for commit: 0"
git checkout $SHA -q
git log --oneline -1
eval $COMMAND

for ((i = 1; i <= $NUM_COMMITS; i++))
do
	echo "building for commit $i"
	git checkout HEAD~1 -q
	git log --oneline -1
	eval $COMMAND
done
git checkout $SHA -q
