#! /bin/bash
#
ARCH="x86_64"
KERNEL_PATH="$HOME/kernel/compiled/arch/$ARCH/boot/bzImage"
BOOT_FILE="image.raw"
ROOTFS="ext4"
MEMORY="1G"
CPUS="1"
MONITOR="vc"
DISPLAY="curses"
EXTRA="mkosi.extra"
BOOT_PARAMS="nokaslr"
COMMAND=""

#parse more complicated command. Expected input is "-{opt}"
#default is above Arguements. Below is all the options available:
#a - ARCH - MUST come before "-k"
#b - BOOT_FILE - Path to boot for the kernel to run (absolute path)
#e - EXTRA - Path to directory for attaching (absolute path) - must be mounted
#p - BOOT_PARAMS - Early boot params (if list, must be surrounded by "")
#k - Path to kernel (relative to expected $HOME/kernel/[]/arch/[]/boot/bzImage)
#K - Path to kernel (absolute path)
#r - Root filesystem type to mount
#c - Number of cpu cores
#m - RAM provided

OPTSTRING="a:b:e:p:k:K:r:c:m:h"

while getopts ${OPTSTRING} opt; do
	case ${opt} in
		a)
			ARCH=${OPTARG}
			;;
		b)
			BOOT_FILE=${OPTARG}
			;;
		e)
			EXTRA=${OPTARG}
			;;
		p)
			BOOT_PARAMS=${OPTARG}
			;;
		k)
			KERNEL_PATH="$HOME/kernel/${OPTARG}/arch/$ARCH/boot/bzImage"
			;;
		K)
			KERNEL_PATH=${OPTARG}
			;;
		r)
			ROOTFS=${OPTARG}
			;;
		c)
			CPUS=${OPTARG}
			;;
		m)
			MEMORY=${OPTARG}
			;;
		h)
			printf "a : ARCH\nb : BOOT_FILE absolute path\ne : EXTRA absolute path\np : BOOT_PARAMS\nk : Kernel BUILD_DIR\nK : absolute Kernel path\nr : ROOTFS\nc : CPUS\nm : MEMORY\n"
			echo "See file for more details"
			exit
			;;
	esac
done

#Simple qemu command. We need the \ to separate each argument otherwise qemu gets confused. Customize as desired.
COMMAND="qemu-kvm \
     -kernel $KERNEL_PATH \
     -drive format=raw,file=$BOOT_FILE \
     -append 'root=/dev/sda1 rw rootfstype=$ROOTFS console=ttSy0 $BOOT_PARAMS' \
     -m $MEMORY \
     -s \
     -monitor $MONITOR \
     -display $DISPLAY \
     -smp cores=$CPUS \
     -virtfs local,path=$EXTRA,mount_tag=host0,security_model=passthrough,id=host0" #for getting access to files, anything in the path directory will work
#    -machine accel=kvm (this can be used if kvm hardware acceleration is supported)
echo $COMMAND
eval $COMMAND
